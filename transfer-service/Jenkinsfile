pipeline{
    agent any
    stages{
         stage('Checkout') {
            steps {
                git url: 'https://github.com/nagcloudlab/devsecops.git', branch: 'main'
            }
        }
        stage('Build') {
            steps {
                dir('transfer-service') {
                    sh 'mvn clean compile'
                }
            }
        }
        stage('Test') {
            steps {
                dir('transfer-service') {
                    sh "mvn test"
                }
            }
        }
        stage('Package') {
            steps {
                dir('transfer-service') {
                    sh "mvn package -DskipTests"
                }
            }
        }
        stage('Deploy') {
            steps {
               withCredentials([file(credentialsId: 'nexus-credentials', variable: 'SETTINGS_XML')]) {
                    dir('transfer-service') {
                        sh 'mvn deploy -DskipTests -s $SETTINGS_XML'
                    }
                }
            }
        }

        // stage('Deploy to Production') {
        //     steps {
        //         dir('transfer-service') {
        //             input message: 'Deploy to Production?', ok: 'Deploy'
        //             // scp command to copy the jar file to the production server
        //             sh 'scp target/transfer-service-1.0-SNAPSHOT.jar user@production-server:/path/to/deploy/'
        //             // ssh command to restart the service on the production server
        //             sh 'ssh user@production-server "systemctl restart transfer-service"'
        //         }
        //     }
        // }

         stage('Build Docker Image') {
            steps {
                script {
                    def imageName = "docker.io/nagabhushanamn/transfer-service"
                    def imageTag = "v${env.BUILD_ID}"
                    def fullImage = "${imageName}:${imageTag}"
                    dir('transfer-service') {
                        sh "docker build -t ${fullImage} ."
                    }
                    env.IMAGE_NAME = imageName
                    env.IMAGE_TAG = imageTag
                }
            }
        }
        stage('Push Docker Image') {
            steps {
                // withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    // sh "echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin"
                    sh "docker push ${env.IMAGE_NAME}:${env.IMAGE_TAG}"
                // }
            }
        }


        stage('Deploy to K8s') {
            steps {
                sh '''
                    sed "s|\\${IMAGE_TAG}|${env.IMAGE_TAG}|g" k8s/deployment.yaml > k8s/deployment-rendered.yaml
                    kubectl apply -f k8s/deployment-rendered.yaml
                    kubectl apply -f k8s/service.yaml
                 '''
            }
        }

    }
}
    